<%=
            cache = {}
            daten = {
                :count=>@count,
                :offset=>params[:offset].to_i,
                :objects=>@daten.map{|row|
                  val = {row.class.primary_key=>row.id, 'id'=>row.id}
                  begin
                    val['scaffold_name']= row.scaffold_name
                  rescue NoMethodError
                    val['scaffold_name']= ""
                  end
                  row.class.scaffold_browse_fields.each{|sbf|
                    unless val.has_key?(sbf)
                      begin
                      val[sbf] = row.instance_eval(sbf)
                      parts = sbf.split(".")
                      if (parts.size > 1)
                        key = (parts[0...-1] + ['id']).join(".")
                        obj = row.instance_eval(key)
                        val[key] = (obj.is_a?(ActiveRecord::Base) ? ( obj.scaffold_name rescue obj.to_s) : obj)
                      end
                      if (row.class.reflect_on_association(sbf.to_sym)) 
                        key = row.class.reflect_on_association(sbf.to_sym).primary_key_name
                        val[key] = row.send(key)
                        obj = row.send(sbf)
                        val[sbf] = (obj.is_a?(ActiveRecord::Base) ? ( obj.scaffold_name rescue obj.to_s) : obj)
                      end
                      rescue NoMethodError=>ignored
                      end
                    end
                  }
                  val
                }
              }
              begin
              daten.to_json.html_safe
              rescue Exception=>e
                logger.debug(e)
                logger.debug(e.backtrace)
                logger.debug("Daten: #{@daten.map{|d| d.id}.inspect}")
                @daten.each{|row|
  d = @model.scaffold_browse_fields.map{|field|
                    scaffold_value(row, field.to_sym, false, cache).to_s
                  } + [(row.scaffold_name rescue "Funktion scaffold_name nicht definiert"), row.id]
                  begin
  d.to_json
rescue
  logger.debug("Kaputt: #{row.id}, #{d.inspect}")
end
                }
                raise
              end
-%>
