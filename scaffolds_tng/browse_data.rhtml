<%=
            cache = {}
            daten = {
                :count=>@count,
                :offset=>params[:offset].to_i,
                :objects=>@daten.map{|row|
                  val = {row.class.primary_key=>row.id, 'id'=>row.id}
                  begin
                    val['scaffold_name']= row.scaffold_name
                  rescue NoMethodError
                    val['scaffold_name']= ""
                  end
                  fields.each{|sbf|
                    unless val.has_key?(sbf)
                      begin
                        val[sbf] = row.instance_eval(sbf)
                        parts = sbf.split(".")
                        # zusÃ¤tzlich noch als JSON Objekthierarchie speichern. In Ruby sind das Hashes
                        parent_value_holder = val
                        parent_object = row
                        # navigate and enrich with ids
                        parts[0...-1].each{|part|
                          parent_value_holder[part] = {} unless parent_value_holder.has_key?(part)
                          parent_value_holder = parent_value_holder[part]
                          # this is for retrieving the primary keys for each object in the hierarchy
                          parent_object = parent_object.send(part)
                          parent_value_holder["id"] = parent_object.id if parent_object.is_a?(ActiveRecord::Base)
                          parent_value_holder[parent_object.class.primary_key] = parent_object.id if parent_object.is_a?(ActiveRecord::Base)
                        }
                        obj = row.instance_eval(sbf)
                        parent_value_holder[parts.last] = (obj.is_a?(ActiveRecord::Base) ? ( obj.scaffold_name rescue obj.to_s) : obj)
                      rescue NoMethodError=>ignored
                      end
                    end
                  }
                  val
                }
              }
              begin
              daten.to_json.html_safe
              rescue Exception=>e
                logger.debug(e)
                logger.debug(e.backtrace)
                logger.debug("Daten: #{@daten.map{|d| d.id}.inspect}")
                @daten.each{|row|
  d = @model.scaffold_browse_fields.map{|field|
                    scaffold_value(row, field.to_sym, false, cache).to_s
                  } + [(row.scaffold_name rescue "Funktion scaffold_name nicht definiert"), row.id]
                  begin
  d.to_json
rescue
  logger.debug("Kaputt: #{row.id}, #{d.inspect}")
end
                }
                raise
              end
-%>
